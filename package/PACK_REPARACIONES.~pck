create or replace package PACK_REPARACIONES is

  -- Author  : KEVIN
  -- Created : 08/05/2025 09:54:00 p. m.
  -- Purpose : 
  
  -- Declaración de procedimientos
  PROCEDURE insertar_usuario(
    p_n_usuario IN VARCHAR2,
    p_cedula IN VARCHAR2,
    p_nombre IN VARCHAR2,
    p_apellido IN VARCHAR2,
    p_contra IN VARCHAR2,
    p_genero_id IN NUMBER,
    p_rol_id IN NUMBER,
    p_correo IN VARCHAR2,
    p_mensaje OUT VARCHAR2
  );

  PROCEDURE insertar_equipo(
    p_estado_id IN NUMBER,
    p_torre_id IN NUMBER,
    p_monitor_id IN NUMBER,
    p_teclado_id IN NUMBER,
    p_raton_id IN NUMBER,
    p_otro_id IN NUMBER,
    p_mensaje OUT VARCHAR2
  );

  PROCEDURE completar_feedback(
    p_mensaje OUT VARCHAR2
  );

  PROCEDURE reiniciar_tipos_act(
    p_mensaje OUT VARCHAR2
  );

  -- Declaración de funciones
  FUNCTION obtener_equipo_y_componentes(
    p_numero_equipo IN NUMBER
  ) RETURN SYS_REFCURSOR;

  FUNCTION obtener_reparaciones_taller(
    p_fecha IN DATE,
    p_numero_equipo IN NUMBER
  ) RETURN SYS_REFCURSOR;

end PACK_REPARACIONES;
/
create or replace package body PACK_REPARACIONES is
PROCEDURE insertar_usuario(
    p_n_usuario IN VARCHAR2,
    p_cedula IN VARCHAR2,
    p_nombre IN VARCHAR2,
    p_apellido IN VARCHAR2,
    p_contra IN VARCHAR2,
    p_genero_id IN NUMBER,
    p_rol_id IN NUMBER,
    p_correo IN VARCHAR2,
    p_mensaje OUT VARCHAR2
  ) IS
  BEGIN
    -- Lógica del procedimiento
    SELECT COUNT(*) INTO v_count FROM generos WHERE id = p_genero_id;
    IF v_count = 0 THEN
      p_mensaje := 'Error: Género no válido';
      RETURN;
    END IF;

    SELECT COUNT(*) INTO v_count FROM roles WHERE id = p_rol_id;
    IF v_count = 0 THEN
      p_mensaje := 'Error: Rol no válido';
      RETURN;
    END IF;

    INSERT INTO usuarios (n_usuario, cedula, nombre, apellido, contra, genero_id, rol_id, correo)
    VALUES (p_n_usuario, p_cedula, p_nombre, p_apellido, p_contra, p_genero_id, p_rol_id, p_correo);

    p_mensaje := 'Usuario insertado correctamente';
  END insertar_usuario;

  PROCEDURE insertar_equipo(
    p_estado_id IN NUMBER,
    p_torre_id IN NUMBER,
    p_monitor_id IN NUMBER,
    p_teclado_id IN NUMBER,
    p_raton_id IN NUMBER,
    p_otro_id IN NUMBER,
    p_mensaje OUT VARCHAR2
  ) IS
  BEGIN
    -- Lógica del procedimiento
    SELECT COUNT(*) INTO v_count FROM estados WHERE id = p_estado_id;
    IF v_count = 0 THEN
      p_mensaje := 'Error: Estado no existe';
      RETURN;
    END IF;

    INSERT INTO equipos (estado_id, torre_id, monitor_id, teclado_id, raton_id, otro_id)
    VALUES (p_estado_id, p_torre_id, p_monitor_id, p_teclado_id, p_raton_id, p_otro_id);

    p_mensaje := 'Equipo insertado correctamente';
  END insertar_equipo;

  PROCEDURE completar_feedback(
    p_mensaje OUT VARCHAR2
  ) IS
  BEGIN
    -- Lógica del procedimiento
    UPDATE feedback
    SET comentarios = 'Información almacenada de forma automática'
    WHERE comentarios IS NULL;

    p_mensaje := 'Comentarios completados con éxito';
  END completar_feedback;

  PROCEDURE reiniciar_tipos_act(
    p_mensaje OUT VARCHAR2
  ) IS
  BEGIN
    -- Lógica del procedimiento
    DELETE FROM tipos_act;

    INSERT INTO tipos_act (tipo) VALUES ('Soporte Técnico');
    INSERT INTO tipos_act (tipo) VALUES ('Mantenimiento Taller');

    p_mensaje := 'Tipos de actividad reiniciados correctamente';
  END reiniciar_tipos_act;

  -- Implementación de funciones
  FUNCTION obtener_equipo_y_componentes(
    p_numero_equipo NUMBER
  ) RETURN SYS_REFCURSOR IS
    v_cursor SYS_REFCURSOR;
  BEGIN
    -- Lógica de la función
    OPEN v_cursor FOR
      SELECT e.id AS equipo_id, e.estado_id, 
             t.n_bien AS torre_bien, t.marca AS torre_marca, t.modelo AS torre_modelo,
             m.n_bien AS monitor_bien, m.marca AS monitor_marca, m.modelo AS monitor_modelo,
             te.n_bien AS teclado_bien, te.marca AS teclado_marca, te.modelo AS teclado_modelo,
             r.n_bien AS raton_bien, r.marca AS raton_marca, r.modelo AS raton_modelo,
             o.dispositivo AS otro_dispositivo, o.n_bien AS otro_bien, o.marca AS otro_marca, o.modelo AS otro_modelo
      FROM equipos e
      LEFT JOIN torres t ON e.torre_id = t.id
      LEFT JOIN monitores m ON e.monitor_id = m.id
      LEFT JOIN teclados te ON e.teclado_id = te.id
      LEFT JOIN ratones r ON e.raton_id = r.id
      LEFT JOIN otros o ON e.otro_id = o.id
      WHERE e.id = p_numero_equipo;

    RETURN v_cursor;
  END obtener_equipo_y_componentes;

  FUNCTION obtener_reparaciones_taller(
    p_fecha DATE,
    p_numero_equipo NUMBER
  ) RETURN SYS_REFCURSOR IS
    v_cursor SYS_REFCURSOR;
  BEGIN
    -- Lógica de la función
    OPEN v_cursor FOR
      SELECT ta.id, ta.usuario_id, ta.actividad_id, ta.fecha, ta.origen, ta.localidad, 
             ta.proceso, ta.descripcion
      FROM taller_act ta
      JOIN actividades a ON ta.actividad_id = a.id
      WHERE a.equipo_id = p_numero_equipo
        AND TRUNC(ta.fecha) = TRUNC(p_fecha);

    RETURN v_cursor;
  END obtener_reparaciones_taller;
end PACK_REPARACIONES;
/
